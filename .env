

const handleButtonClick = (value) => {
  if (value === '=') {
    try {
      const result = new Function('return ' + displayValue)();
      setDisplayValue(formatResult(result));
    } catch (err) {
      setDisplayValue('Error');
    }
    setKeyBuffer(''); // Reset keyBuffer when equal sign is clicked
  } else if (value === 'C') {
    setDisplayValue('0');
  } else if (['sin', 'cos', 'tan'].includes(value)) {
    const radians = (Math.PI / 180) * parseFloat(displayValue);
    let result;
    if (value === 'sin') result = Math.sin(radians);
    else if (value === 'cos') result = Math.cos(radians);
    else if (value === 'tan') result = Math.tan(radians);
    setDisplayValue(formatResult(result));
    setKeyBuffer(''); // Reset keyBuffer when trigonometric button is clicked
    setLastKeyPressed('='); // Reset lastKeyPressed when trigonometric button is clicked
  } else if (value === 'log') {
    const result = Math.log10(parseFloat(displayValue));
    setDisplayValue(formatResult(result));
  } else if (value === 'sqrt') {
    const result = Math.sqrt(parseFloat(displayValue));
    setDisplayValue(formatResult(result));
  } else if (value === '^') {
    setDisplayValue(displayValue + '^');
  } else if (['+', '-', '*', '/'].includes(value)) {
    if (!isNaN(keyBuffer) && !isNaN(displayValue.slice(-1))) {
      setDisplayValue(displayValue + value);
    }
  } else if (value === 'OFF') {
    setDisplayValue('');
  } else {
    if (displayValue === '0' || displayValue === 'Error' || lastKeyPressed === '=' || ['sin', 'cos', 'tan'].includes(lastKeyPressed)) {
      setDisplayValue(value);
    } else if (value === '.' && displayValue.includes('.')) {
      return;
    } else {
      setDisplayValue(displayValue + value);
    }
  }

  if (/^[0-9]$/.test(value)) {
    setKeyBuffer(keyBuffer + value); // Add numeric key to buffer
  } else {
    setKeyBuffer(''); // Clear the buffer for non-numeric keys
  }

  setLastKeyPressed(value); // Update the last key pressed
};